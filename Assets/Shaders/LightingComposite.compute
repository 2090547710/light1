#pragma kernel CSObstacleLight
#pragma kernel CSNormalLight

Texture2D<float> _HeightMap;
RWTexture2D<float4> _CompositeMap;

float4 _LightBounds; // x,y: min点, z,w: max点
float4 _RootBounds; // x,y: center, z,w: size
float _IsObstacle;
float _LightHeight;
float _IsAdditive; // 新增加减操作参数，1为加，0为减

// 新增uniform参数：合成图区域起始位置和区域尺寸
int2 _CompositeOffset;
int2 _CompositeRegionSize;

[numthreads(16,16,1)]
void CSObstacleLight(uint3 id : SV_DispatchThreadID)
{
    // 获取合成图尺寸
    uint compWidth, compHeight;
    _CompositeMap.GetDimensions(compWidth, compHeight);
    
    // 每个线程负责合成图中的一个像素，其真实坐标为：线程ID + _CompositeOffset
    int2 compCoord = int2(id.xy) + _CompositeOffset;
    
    // 判断该线程是否超出区域范围
    if(compCoord.x >= _CompositeOffset.x + _CompositeRegionSize.x ||
       compCoord.y >= _CompositeOffset.y + _CompositeRegionSize.y)
        return;
    
    // 计算当前合成图像素在该区域内的归一化坐标 t ∈ [0,1]
    float2 t = (float2(compCoord - _CompositeOffset)) / (float2(_CompositeRegionSize - 1));
    
    // 获取高度图尺寸
    uint heightWidth, heightHeight;
    _HeightMap.GetDimensions(heightWidth, heightHeight);
    
    // 计算光源图上对应的浮点采样坐标（两个通道均对应高度图维度）
    float2 lightCoord = t * float2(heightWidth - 1, heightHeight - 1);
    
    // 双线性插值采样
    int2 coordInt = int2(floor(lightCoord));
    float2 frac = lightCoord - float2(coordInt);
    
    // 为防止越界，在采样时限制最大索引（保证 coordInt+1 不超过边界 ）
    coordInt.x = clamp(coordInt.x, 0, int(heightWidth) - 2);
    coordInt.y = clamp(coordInt.y, 0, int(heightHeight) - 2);
    
    float a = _HeightMap[uint2(coordInt.x,     coordInt.y    )].r;
    float b = _HeightMap[uint2(coordInt.x + 1, coordInt.y    )].r;
    float c = _HeightMap[uint2(coordInt.x,     coordInt.y + 1)].r;
    float d = _HeightMap[uint2(coordInt.x + 1, coordInt.y + 1)].r;
    float objectHeight = lerp(lerp(a, b, frac.x), lerp(c, d, frac.x), frac.y);

    // 对于障碍物光源，将采样得到的高度累加/减去到通道 G 上
    float4 compositeData = _CompositeMap[uint2(compCoord.x, compCoord.y)];
    
    if (_IsAdditive > 0.5) {
        // 加法操作
        compositeData.g = compositeData.g + objectHeight;
    } else {
        // 减法操作 - 允许低于0
        compositeData.g = compositeData.g - objectHeight;
    }
    
    _CompositeMap[uint2(compCoord.x, compCoord.y)] = compositeData;
}

[numthreads(16,16,1)]
void CSNormalLight(uint3 id : SV_DispatchThreadID)
{
    uint compWidth, compHeight;
    _CompositeMap.GetDimensions(compWidth, compHeight);
    
    int2 compCoord = int2(id.xy) + _CompositeOffset;
    
    if(compCoord.x >= _CompositeOffset.x + _CompositeRegionSize.x ||
       compCoord.y >= _CompositeOffset.y + _CompositeRegionSize.y)
        return;
    
    float2 t = (float2(compCoord - _CompositeOffset)) / (float2(_CompositeRegionSize - 1));
    
    uint heightWidth, heightHeight;
    _HeightMap.GetDimensions(heightWidth, heightHeight);
    
    float2 lightCoord = t * float2(heightWidth - 1, heightHeight - 1);
    int2 coordInt = int2(floor(lightCoord));
    float2 frac = lightCoord - float2(coordInt);
    
    coordInt.x = clamp(coordInt.x, 0, int(heightWidth) - 2);
    coordInt.y = clamp(coordInt.y, 0, int(heightHeight) - 2);
    
    float a = _HeightMap[uint2(coordInt.x,     coordInt.y    )].r;
    float b = _HeightMap[uint2(coordInt.x + 1, coordInt.y    )].r;
    float c = _HeightMap[uint2(coordInt.x,     coordInt.y + 1)].r;
    float d = _HeightMap[uint2(coordInt.x + 1, coordInt.y + 1)].r;
    float objectHeight = lerp(lerp(a, b, frac.x), lerp(c, d, frac.x), frac.y);

    // 如果采样高度过小，忽略该像素
    if(objectHeight < 0.01f) return;
    
    uint2 compCoordUInt = uint2(compCoord.x, compCoord.y);
    float4 compositeData = _CompositeMap[compCoordUInt];
    float obstacleHeight = compositeData.g;
    
    // 只有当光源高度大于障碍物累加高度时才写入（加/减到通道 R ）
    float clampedLightHeight = clamp(_LightHeight, 0.0, 1.0);
    float clampedObstacleHeight = clamp(obstacleHeight, 0.0, 1.0);
    
    if(clampedLightHeight >= clampedObstacleHeight) {
        if (_IsAdditive > 0.5) {
            // 加法操作
            compositeData.r = compositeData.r + objectHeight;
        } else {
            // 减法操作 - 允许低于0
            compositeData.r = compositeData.r - objectHeight;
        }
        _CompositeMap[compCoordUInt] = compositeData;
    }
}
