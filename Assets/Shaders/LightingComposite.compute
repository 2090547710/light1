#pragma kernel CSObstacleLight
#pragma kernel CSNormalLight

Texture2D<float> _HeightMap;
RWTexture2D<float4> _CompositeMap;

float4 _LightBounds; // x,y: min点, z,w: max点
float4 _RootBounds; // x,y: center, z,w: size
float _IsObstacle;
float _LightHeight;

[numthreads(16,16,1)]
void CSObstacleLight(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    _HeightMap.GetDimensions(width, height);
    
    if(id.x >= width || id.y >= height) return;
    
    // 计算世界空间UV
    float2 uv = float2(id.xy) / float2(width-1, height-1);
    float2 targetUV = lerp(_LightBounds.xy, _LightBounds.zw, uv);
    
    // 计算合成图坐标
    uint compositeWidth, compositeHeight;
    _CompositeMap.GetDimensions(compositeWidth, compositeHeight);
    
    // 修改后的区域映射计算
    float2 compositeUVStart = targetUV * float2(compositeWidth-1, compositeHeight-1);
    float2 compositeUVEnd = (targetUV + (1.0f / float2(width, height))) * float2(compositeWidth-1, compositeHeight-1);
    
    // 显式转换浮点数为无符号整数
    uint startY = uint(max(0, floor(compositeUVStart.y)));
    uint endY = uint(min(compositeHeight-1, ceil(compositeUVEnd.y)));
    uint startX = uint(max(0, floor(compositeUVStart.x)));
    uint endX = uint(min(compositeWidth-1, ceil(compositeUVEnd.x)));
    
    // 遍历合成图对应区域
    for (uint y = startY; y <= endY; y++) {
        for (uint x = startX; x <= endX; x++) {
            uint2 areaCoord = uint2(
                clamp(x, 0, compositeWidth-1),
                clamp(y, 0, compositeHeight-1)
            );
            
            // 障碍物写入绿色通道
            float objectHeight = _HeightMap[id.xy].r;
            float4 compositeData = _CompositeMap[areaCoord];
            float newHeight = saturate(compositeData.g + objectHeight);
            compositeData.g = newHeight;
            _CompositeMap[areaCoord] = compositeData;
        }
    }
}

[numthreads(16,16,1)]
void CSNormalLight(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    _HeightMap.GetDimensions(width, height);
    
    if(id.x >= width || id.y >= height) return;
    
    // 计算世界空间UV
    float2 uv = float2(id.xy) / float2(width-1, height-1);
    float2 targetUV = lerp(_LightBounds.xy, _LightBounds.zw, uv);
    
    // 计算合成图坐标
    uint compositeWidth, compositeHeight;
    _CompositeMap.GetDimensions(compositeWidth, compositeHeight);
    
    // 同样的区域映射修改
    float2 compositeUVStart = targetUV * float2(compositeWidth-1, compositeHeight-1);
    float2 compositeUVEnd = (targetUV + (1.0f / float2(width, height))) * float2(compositeWidth-1, compositeHeight-1);
    
    // 同样的类型转换修正
    uint startY = uint(max(0, floor(compositeUVStart.y)));
    uint endY = uint(min(compositeHeight-1, ceil(compositeUVEnd.y)));
    uint startX = uint(max(0, floor(compositeUVStart.x)));
    uint endX = uint(min(compositeWidth-1, ceil(compositeUVEnd.x)));
    
    // 遍历合成图对应区域
    for (uint y = startY; y <= endY; y++) {
        for (uint x = startX; x <= endX; x++) {
            uint2 areaCoord = uint2(
                clamp(x, 0, compositeWidth-1),
                clamp(y, 0, compositeHeight-1)
            );
            
            // 获取当前像素值
            float objectHeight = _HeightMap[id.xy].r;
            if(objectHeight < 0.01f) return;
            
            float obstacleHeight = _CompositeMap[areaCoord].g;
            float4 compositeData = _CompositeMap[areaCoord];  // 读取完整数据
            
            // 只有当光源高度大于障碍物且亮度足够时才写入
            if(_LightHeight >= obstacleHeight) {
                float newHeight = saturate(compositeData.r + objectHeight); //叠加并限制在0-1之间
                compositeData.r = newHeight;  // 修改红色通道
                _CompositeMap[areaCoord] = compositeData;  // 完整写入所有通道
            }
        }
    }
}
